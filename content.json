{"meta":{"title":"Mr.阿Q","subtitle":"阿Q正在转","description":"分享踩坑技术和生活","author":"Mr.阿Q","url":"https://leiqun1998.github.io","root":"/"},"pages":[{"title":"","date":"2022-04-01T09:26:32.788Z","updated":"2022-04-01T09:26:32.788Z","comments":true,"path":"about/index.html","permalink":"https://leiqun1998.github.io/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"","date":"2022-08-09T09:58:13.746Z","updated":"2022-08-09T09:58:13.746Z","comments":true,"path":"html/index.html","permalink":"https://leiqun1998.github.io/html/index.html","excerpt":"","text":"跳转中 此页面为测试页面... .tz { color: red; }"},{"title":"所有标签","date":"2022-04-01T09:31:04.167Z","updated":"2022-04-01T09:31:04.167Z","comments":true,"path":"blog/tags/index.html","permalink":"https://leiqun1998.github.io/blog/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2022-04-01T09:31:32.012Z","updated":"2022-04-01T09:31:32.012Z","comments":true,"path":"blog/categories/index.html","permalink":"https://leiqun1998.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2022-04-01T09:34:33.000Z","updated":"2022-04-01T09:35:34.566Z","comments":true,"path":"blog/friends/index.html","permalink":"https://leiqun1998.github.io/blog/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"}],"posts":[{"title":"CSS水印方法","slug":"CSS水印方法","date":"2022-02-28T16:00:00.000Z","updated":"2022-08-10T06:02:20.285Z","comments":true,"path":"2022/03/CSS水印方法/","link":"","permalink":"https://leiqun1998.github.io/2022/03/CSS%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%B3%95/","excerpt":"","text":"CSS水印方法①纯CSS使用方法修改【zhangxinxu.com】水印中的文字 1background: url(&quot;data:image/svg+xml,%3Csvg width=&#x27;200&#x27; height=&#x27;200&#x27; xmlns=&#x27;http://www.w3.org/2000/svg&#x27;%3E%3Ctext x=&#x27;50%25&#x27; y=&#x27;50%25&#x27; font-size=&#x27;14&#x27; fill-opacity=&#x27;0.5&#x27; text-anchor=&#x27;middle&#x27; dominant-baseline=&#x27;middle&#x27; transform=&#x27;rotate(-45, 100 100)&#x27;%3Ezhangxinxu.com%3C/text%3E%3C/svg%3E&quot;); ②在vue中可优化为【js动态方法】，为指定目标添加背景水印：—————————————————【编写方法函数】————————————————— 123456methods: &#123;// 设置背景文字水印, ref: ref对象 val: 水印的值, 注意: 此方法是设置为背景图,因此在设置此水印时,不可设置背景图片 setWatermark(ref, val)&#123; ref.style.background = `url(&quot;data:image/svg+xml,%3Csvg width=&#x27;200&#x27; height=&#x27;200&#x27; xmlns=&#x27;http://www.w3.org/2000/svg&#x27;%3E%3Ctext x=&#x27;50%25&#x27; y=&#x27;50%25&#x27; font-size=&#x27;14&#x27; fill-opacity=&#x27;0.5&#x27; text-anchor=&#x27;middle&#x27; dominant-baseline=&#x27;middle&#x27; transform=&#x27;rotate(-45, 100 100)&#x27;%3E$&#123;val&#125;%3C/text%3E%3C/svg%3E&quot;)`; &#125;&#125; —————————————————【使用】—————————————————1、为指定目标设置【ref】： 1&lt;div class=&quot;home&quot; ref=&quot;home&quot;&gt;&lt;/div&gt; 2、在【mounted】中调用（页面初始化时调用） 123mounted() &#123; this.setWatermark(this.$refs.home, this.$route.params.code) // 设置背景文字水印&#125;, —————————————————【css优化】————————————————— 12345678.home&#123; /* 可能需要以下css进行样式优化 */ background-repeat: no-repeat; background-position: center; background-size: 100%; color: #fff;&#125;","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://leiqun1998.github.io/tags/CSS/"}]},{"title":"el-tree实现虚线-指示线效果","slug":"el-tree实现虚线-指示线效果","date":"2021-11-04T16:00:00.000Z","updated":"2022-08-10T06:03:59.178Z","comments":true,"path":"2021/11/el-tree实现虚线-指示线效果/","link":"","permalink":"https://leiqun1998.github.io/2021/11/el-tree%E5%AE%9E%E7%8E%B0%E8%99%9A%E7%BA%BF-%E6%8C%87%E7%A4%BA%E7%BA%BF%E6%95%88%E6%9E%9C/","excerpt":"","text":"参考网站：vue 为element树形组件el-tree添加虚线，指示线 实现效果图 代码部分1234567&lt;el-tree :class=&quot;tree-main&quot; :data=&quot;treeData&quot; :default-expand-all=&quot;true&quot; :indent=&quot;0&quot; highlight-current&gt;&lt;/el-tree&gt; CSS部分12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;style lang=&quot;scss&quot;&gt;.tree-main&#123; .el-tree&#123; .el-tree-node &#123; position: relative; // padding-left: 16px; // 缩进量(根据是否有子树来定) padding-left: 0; // 缩进量 &#125; .el-tree-node__children &#123; padding-left: 16px; // 缩进量 &#125; // .el-tree-node__expand-icon&#123; // z-index: 1; // &#125; // 竖线 .el-tree-node::before &#123; content: &quot;&quot;; height: 100%; width: 1px; position: absolute; left: -3px; top: -26px; // -26px 12 border-width: 1px; border-left: 1px dashed #909399; &#125; // 当前层最后一个节点的竖线高度固定 .el-tree-node:last-child::before &#123; height: 38px; // 可以自己调节到合适数值 &#125; // 横线 .el-tree-node::after &#123; content: &quot;&quot;; width: 24px; height: 20px; position: absolute; left: -3px; top: 12px; border-width: 1px; border-top: 1px dashed #909399; &#125; // 去掉最顶层的虚线，放最下面样式才不会被上面的覆盖了 &amp; &gt; .el-tree-node&#123; padding-left: 0; // 缩进量 &#125; &amp; &gt; .el-tree-node::after &#123; border-top: none; &#125; &amp; &gt; .el-tree-node::before &#123; border-left: none; &#125; // 展开关闭的icon .el-tree-node__expand-icon&#123; font-size: 16px; // 叶子节点（无子节点） &amp;.is-leaf&#123; color: transparent; // display: none; // 也可以去掉 &#125; &#125; &#125;&#125;&lt;/style&gt;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/tags/Vue/"},{"name":"Element UI","slug":"Element-UI","permalink":"https://leiqun1998.github.io/tags/Element-UI/"}]},{"title":"vue如何在css样式中使用data中的变量","slug":"vue如何在css样式中使用data中的变量","date":"2021-11-04T16:00:00.000Z","updated":"2022-08-10T06:05:34.198Z","comments":true,"path":"2021/11/vue如何在css样式中使用data中的变量/","link":"","permalink":"https://leiqun1998.github.io/2021/11/vue%E5%A6%82%E4%BD%95%E5%9C%A8css%E6%A0%B7%E5%BC%8F%E4%B8%AD%E4%BD%BF%E7%94%A8data%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/","excerpt":"","text":"vue如何在css样式中使用data中的变量1234567891011121314151617181920212223242526&lt;template&gt; &lt;div :style=&quot;styleVar&quot;&gt; &lt;p class=&quot;text&quot;&gt;测试文本&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data() &#123; return &#123; color: &quot;red&quot; &#125;; &#125;, computed: &#123; styleVar() &#123; return &#123; &#x27;--color&#x27;: this.color &#125; &#125; &#125;,&#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.text &#123; color: var(--color);&#125;&lt;/style&gt; 如何在css伪元素样式中使用data中的变量12345678910111213141516171819&lt;template&gt; &lt;div :style=&quot;&#123;&#x27;--background&#x27;: background&#125;&quot;&gt; &lt;p class=&quot;text&quot;&gt;测试文本&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data() &#123; return &#123; background: `url($&#123;require(&#x27;./bg.png&#x27;)&#125;) no-repeat 50% 50%` &#125;; &#125;,&#125;&lt;/script&gt;&lt;style scoped&gt;.text:after &#123; color: var(--background);&#125;&lt;/style&gt; 参考网站: vue动态样式绑定改变伪元素等特殊样式(css var函数)","categories":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/tags/Vue/"}]},{"title":"el-tree树形控件全选与取消全选的功能实现","slug":"el-tree树形控件全选与取消全选的功能实现","date":"2021-10-26T03:17:18.000Z","updated":"2022-08-10T06:06:08.545Z","comments":true,"path":"2021/10/el-tree树形控件全选与取消全选的功能实现/","link":"","permalink":"https://leiqun1998.github.io/2021/10/el-tree%E6%A0%91%E5%BD%A2%E6%8E%A7%E4%BB%B6%E5%85%A8%E9%80%89%E4%B8%8E%E5%8F%96%E6%B6%88%E5%85%A8%E9%80%89%E7%9A%84%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"el-tree树形控件全选与取消全选的功能实现 说明：此处的el-tree是设置【*:check-strictly=”true”*】，父子不互相关联 el-tree组件需设置【ref】，使其设置对应目标 关键在于el-tree以下两个事件 【setChecked】 【setCheckedKeys】 123456789101112131415161718// 设置全选【data: tree数据, el: tree目标】treeSelectAll(data, el)&#123; // console.log(data,999); for (let i = 0; i &lt; data.length; i++) &#123; // this.$refs.tree.setChecked(data[i].id, true); el.setChecked(data[i].id, true); if(data[i].children &amp;&amp; data[i].children.length&gt;0)&#123; this.setCheckeds(data[i].children, el) &#125; &#125;&#125;// 取消全选【el: tree目标】treeCancelSelectAll(el)&#123; // this.$refs.tree.setCheckedKeys([]); el.setCheckedKeys([]);&#125;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/tags/Vue/"},{"name":"Element UI","slug":"Element-UI","permalink":"https://leiqun1998.github.io/tags/Element-UI/"}]},{"title":"Div滚动条自动滚动到最底部","slug":"Vue中Div滚动条自动滚到到最底部","date":"2021-10-13T16:00:00.000Z","updated":"2022-08-10T06:07:53.305Z","comments":true,"path":"2021/10/Vue中Div滚动条自动滚到到最底部/","link":"","permalink":"https://leiqun1998.github.io/2021/10/Vue%E4%B8%ADDiv%E6%BB%9A%E5%8A%A8%E6%9D%A1%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%88%B0%E5%88%B0%E6%9C%80%E5%BA%95%E9%83%A8/","excerpt":"","text":"Div滚动条自动滚动到最底部 Vue中Div滚动条自动滚动到最底部 目标Div设置 ref=”chatlog” this.$refs.chatlog.$el 获取目标 $nextTick 在修改数据后在回调中获取更新后的DOM 123456// 日志区滚动处理,滚动条自动滚动到底部chatlogUpdate()&#123; this.$nextTick(() =&gt; &#123; this.$refs.chatlog.$el.scrollTop = this.$refs.chatlog.$el.scrollHeight &#125;)&#125;,","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/tags/Vue/"},{"name":"JS","slug":"JS","permalink":"https://leiqun1998.github.io/tags/JS/"}]},{"title":"Vue路由发生变化修改页面title","slug":"Vue路由发生变化修改页面title","date":"2021-10-07T16:00:00.000Z","updated":"2022-08-10T06:08:29.570Z","comments":true,"path":"2021/10/Vue路由发生变化修改页面title/","link":"","permalink":"https://leiqun1998.github.io/2021/10/Vue%E8%B7%AF%E7%94%B1%E5%8F%91%E7%94%9F%E5%8F%98%E5%8C%96%E4%BF%AE%E6%94%B9%E9%A1%B5%E9%9D%A2title/","excerpt":"","text":"Vue路由发生变化修改页面title router.js页面代码123456789101112131415161718192021222324252627282930313233343536373839import Vue from &#x27;vue&#x27;import Router from &#x27;vue-router&#x27;Vue.use(Router)const router = new Router(&#123; routes: [ &#123; path: &#x27;/&#x27;, name: &#x27;Login&#x27;, component: () =&gt; import(&#x27;@/views/login/index&#x27;), meta: &#123; title: &#x27;登录&#x27; &#125; &#125;, &#123; path: &#x27;/main&#x27;, name: &#x27;Main&#x27;, component: () =&gt; import(&#x27;@/views/main/index&#x27;), meta: &#123; title: &#x27;主页&#x27; &#125; &#125;, &#123; path: &#x27;/dom&#x27;, name: &#x27;Dom&#x27;, component: () =&gt; import(&#x27;@/views/dom/index&#x27;), meta: &#123; title: &#x27;页面Dom&#x27; &#125; &#125;, ],&#125;) router.beforeEach((to, from, next) =&gt; &#123; /* 路由发生变化修改页面title */ if (to.meta.title) &#123; document.title = to.meta.title; &#125; next();&#125;);export default router;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/tags/Vue/"}]},{"title":"el-table设置内容居中及复选框只能选择一个","slug":"el-table设置内容居中及复选框只能选择一个","date":"2021-10-07T16:00:00.000Z","updated":"2022-08-10T06:09:21.943Z","comments":true,"path":"2021/10/el-table设置内容居中及复选框只能选择一个/","link":"","permalink":"https://leiqun1998.github.io/2021/10/el-table%E8%AE%BE%E7%BD%AE%E5%86%85%E5%AE%B9%E5%B1%85%E4%B8%AD%E5%8F%8A%E5%A4%8D%E9%80%89%E6%A1%86%E5%8F%AA%E8%83%BD%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA/","excerpt":"","text":"&lt;el-table&gt;设置表头和单元格内容居中 关键在于以下两个属性： :header-cell-style (表头样式) :cell-style (单元格样式) 给其设置textAlign: &#39;center&#39; 12345678910111213&lt;el-table border ref=&quot;table&quot; :data=&quot;tableData&quot; @selection-change=&quot;handSelChange&quot; style=&quot;width: 100%; margin-top: 15px;&quot; :header-cell-style=&quot;&#123;textAlign: &#x27;center&#x27;,backgroundColor: &#x27;rgba(178, 210, 249, 0.35)&#x27;&#125;&quot; :cell-style=&quot;&#123;textAlign: &#x27;center&#x27;&#125;&quot;&gt; &lt;el-table-column type=&quot;selection&quot; width=&quot;50&quot;&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=&quot;type&quot; label=&quot;类型&quot; width=&quot;100&quot; :resizable=&quot;false&quot; sortable&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=&quot;z_dataSource&quot; label=&quot;主数据源&quot; :resizable=&quot;false&quot;&gt;&lt;/el-table-column&gt;&lt;/el-table&gt; 图例 &lt;el-table&gt;设置复选框只能选择一个 &lt;el-table&gt;的 @selection-change=”handSelChange” 中 12345678910111213// 设置只能选择一个数据！！！handSelChange(val)&#123; this.SelRow = val console.log(val,999); this.tableData.forEach(item =&gt;&#123; if(val[val.length - 1] === item)&#123; this.$refs.table.toggleRowSelection(item, true) &#125;else&#123; this.$refs.table.toggleRowSelection(item, false) &#125; &#125;)&#125;,","categories":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/tags/Vue/"},{"name":"Element UI","slug":"Element-UI","permalink":"https://leiqun1998.github.io/tags/Element-UI/"}]},{"title":"el-table中多个操作菜单的优化案例","slug":"el-table中多个操作菜单的优化案例","date":"2021-09-17T16:00:00.000Z","updated":"2022-08-10T06:10:15.833Z","comments":true,"path":"2021/09/el-table中多个操作菜单的优化案例/","link":"","permalink":"https://leiqun1998.github.io/2021/09/el-table%E4%B8%AD%E5%A4%9A%E4%B8%AA%E6%93%8D%E4%BD%9C%E8%8F%9C%E5%8D%95%E7%9A%84%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;el-table-column width=&quot;150px&quot; fixed=&quot;right&quot;&gt; &lt;template slot=&quot;header&quot; slot-scope=&quot;scope&quot;&gt; &lt;el-input v-model=&quot;search&quot; size=&quot;mini&quot; style=&quot;width:100%;&quot; placeholder=&quot;输入系统名称搜索&quot; clearable /&gt; &lt;/template&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;!-- &lt;el-button type=&quot;text&quot; size=&quot;small&quot; @click=&quot;editData(&#x27;edit&#x27;, scope.row)&quot; style=&quot;margin-left: 10px;&quot;&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;text&quot; size=&quot;small&quot; @click=&quot;editData(&#x27;editMenu&#x27;, scope.row)&quot;&gt;编辑菜单&lt;/el-button&gt; &lt;el-button type=&quot;text&quot; size=&quot;small&quot; @click=&quot;view(scope.row)&quot;&gt;查看&lt;/el-button&gt; &lt;el-button type=&quot;text&quot; size=&quot;small&quot; @click=&quot;modifyUser(scope.row.id)&quot; v-if=&quot;false&quot;&gt;初始化&lt;/el-button&gt; &lt;el-button type=&quot;text&quot; size=&quot;small&quot; @click=&quot;deleteData(scope.row.id)&quot;&gt;删除&lt;/el-button&gt; --&gt; &lt;!-- --------------------------------------------------------------------------------------- --&gt; &lt;!-- 1、以下是多个菜单的优化方案,点击事件可在【el-dropdown-item】标签中直接设置【@click】事件； 也可在其中通过外层【el-dropdown】标签添加【@command=&quot;handleCommand&quot;】事件， 再在每个【el-dropdown-item】标签中添加如【command=&quot;a&quot;】属性，根据【command】的值来判断对应事件 --&gt; &lt;!-- &lt;el-dropdown split-button v-if=&quot;false&quot; size=&quot;mini&quot; type=&quot;primary&quot; @command=&quot;handleCommand&quot; style=&quot;margin-left: 10px;&quot;&gt; 更多菜单 &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt; &lt;el-dropdown-item :command=&quot;&#123; type:&#x27;edit&#x27;, data: scope.row&#125;&quot;&gt;编辑&lt;/el-dropdown-item&gt; &lt;el-dropdown-item :command=&quot;&#123; type:&#x27;editMenu&#x27;, data: scope.row&#125;&quot;&gt;编辑菜单&lt;/el-dropdown-item&gt; &lt;el-dropdown-item :command=&quot;&#123; type:&#x27;view&#x27;, data: scope.row&#125;&quot;&gt;查看&lt;/el-dropdown-item&gt; &lt;el-dropdown-item :command=&quot;&#123; type:&#x27;init&#x27;, data: scope.row.id&#125;&quot; v-if=&quot;false&quot;&gt;初始化&lt;/el-dropdown-item&gt; &lt;el-dropdown-item :command=&quot;&#123; type:&#x27;delete&#x27;, data: scope.row.id&#125;&quot;&gt;删除&lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/el-dropdown&gt; --&gt; &lt;!-- 2、直接在【el-dropdown-item】标签上设置【@click】事件，必须加上修饰符【.native】，否则事件无法生效！ 以下点击事件为测试事件，若使用，请参照上方旧方法，设置正式事件！！！ --&gt; &lt;!-- &lt;el-dropdown split-button size=&quot;mini&quot; type=&quot;primary&quot; style=&quot;margin-left: 10px;&quot;&gt; 更多菜单 &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt; &lt;el-dropdown-item @click.native=&quot;ommandClick(&#x27;edit&#x27;, scope.row)&quot;&gt;编辑&lt;/el-dropdown-item&gt; &lt;el-dropdown-item @click.native=&quot;ommandClick(&#x27;editMenu&#x27;)&quot;&gt;编辑菜单&lt;/el-dropdown-item&gt; &lt;el-dropdown-item @click.native=&quot;ommandClick(&#x27;view&#x27;)&quot;&gt;查看&lt;/el-dropdown-item&gt; &lt;el-dropdown-item @click.native=&quot;ommandClick(&#x27;init&#x27;)&quot; v-if=&quot;false&quot;&gt;初始化&lt;/el-dropdown-item&gt; &lt;el-dropdown-item @click.native=&quot;ommandClick(&#x27;delete&#x27;, scope.row.id)&quot;&gt;删除&lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/el-dropdown&gt; --&gt; &lt;!-- --------------------------------------------------------------------------------------- --&gt; &lt;el-dropdown split-button size=&quot;mini&quot; type=&quot;primary&quot; style=&quot;margin-left: 10px;&quot;&gt; 操作 &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt; &lt;el-dropdown-item @click.native=&quot;editData(&#x27;edit&#x27;, scope.row)&quot;&gt;编辑&lt;/el-dropdown-item&gt; &lt;el-dropdown-item @click.native=&quot;editData(&#x27;editMenu&#x27;, scope.row)&quot;&gt;编辑菜单&lt;/el-dropdown-item&gt; &lt;el-dropdown-item @click.native=&quot;view(scope.row)&quot;&gt;查看&lt;/el-dropdown-item&gt; &lt;el-dropdown-item @click.native=&quot;modifyUser(scope.row.id)&quot; v-if=&quot;false&quot;&gt;初始化&lt;/el-dropdown-item&gt; &lt;el-dropdown-item @click.native=&quot;deleteData(scope.row.id)&quot; style=&quot;color: #F56C6C;&quot;&gt;删除&lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/el-dropdown&gt; &lt;/template&gt; &lt;/el-table-column&gt;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/tags/Vue/"},{"name":"Element UI","slug":"Element-UI","permalink":"https://leiqun1998.github.io/tags/Element-UI/"}]},{"title":"Echarts图表大小自适应","slug":"Echarts图表大小自适应","date":"2021-09-06T16:00:00.000Z","updated":"2022-08-10T06:00:40.920Z","comments":true,"path":"2021/09/Echarts图表大小自适应/","link":"","permalink":"https://leiqun1998.github.io/2021/09/Echarts%E5%9B%BE%E8%A1%A8%E5%A4%A7%E5%B0%8F%E8%87%AA%E9%80%82%E5%BA%94/","excerpt":"","text":"Echarts图表大小自适应旧方法(监听窗口大小调取Echarts自身resize()事件)123window.addEventListener(&quot;resize&quot;, function() &#123; myChart.resize()&#125;) 此方法存在弊端，在进行菜单缩放时会失效 解决方案：采用新方法： ​ 使用 element-resize-detector 解决问题 1、在项目中安装 1npm install element-resize-detector 2、注入依赖，引用 全局引用： ​ 在main.js中 12import ElementResizeDetectorMaker from &quot;element-resize-detector&quot;Vue.prototype.$erd = ElementResizeDetectorMaker() ​ Index.vue页面中（实际作用区域在mounted中）： 123456789101112let that = this;this.$erd.listenTo(document.getElementById(&quot;test&quot;), function (element) &#123; //test为外div的id var width = element.offsetWidth var height = element.offsetHeight console.log(&quot;Size: &quot; + width + &quot;x&quot; + height) that.$nextTick(function () &#123;//使echarts尺寸重置myChart.resize(); // const myChart = this.$echarts.init(document.getElementById(&#x27;myChart&#x27;)) &#125;)&#125;) 缺点：对话框组件当中引用的话，会无法跟随对话框自适应宽度（暂无找到问题所在！） 2021-7-19更新 新方法（自定义指令方法）参考网址：vue+element项目里实时监听某个div宽度的变化，然后执行相应的事件_csl125的博客-CSDN博客 使用Vue的局部注册指令的方式注入事件，触发时就调用echarts的resize()方法适应大小 —示例代码—1、与mounted为同一级： 12345678910111213141516171819directives: &#123; // 使用局部注册指令的方式 resize: &#123; // 指令的名称 bind(el, binding) &#123; // el为绑定的元素，binding为绑定给指令的对象 let width = &#x27;&#x27;, height = &#x27;&#x27;; function isReize() &#123; const style = document.defaultView.getComputedStyle(el); if (width !== style.width || height !== style.height) &#123; binding.value(); // 关键 &#125; width = style.width; height = style.height; &#125; el.__vueSetInterval__ = setInterval(isReize, 300); &#125;, unbind(el) &#123; clearInterval(el.__vueSetInterval__); &#125; &#125; &#125;, 2、在其echarts的父div中使用该指令v-resize 123&lt;div ref=&quot;main&quot; v-resize=&quot;initResize&quot; :style=&quot;&#123;width: width, height: height&#125;&quot;&gt; &lt;div id=&quot;chart&quot; ref=&quot;chart&quot; style=&quot;width: 100%;height:100%;&quot; &gt;&lt;/div&gt;&lt;/div&gt; 3、mounted中（调用echarts本身的事件resize()重新设置大小）： 1234initResize()&#123; // echarts.init(document.getElementById(&quot;chart&quot;)).resize() this.$echarts.init(this.$refs.chart).resize() //调用echarts本身的事件重新设置大小&#125;,","categories":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/tags/Vue/"},{"name":"Echarts","slug":"Echarts","permalink":"https://leiqun1998.github.io/tags/Echarts/"}]},{"title":"Vue自定义项目打包文件名","slug":"vue自定义项目打包文件名","date":"2021-09-02T16:00:00.000Z","updated":"2022-08-10T06:10:31.843Z","comments":true,"path":"2021/09/vue自定义项目打包文件名/","link":"","permalink":"https://leiqun1998.github.io/2021/09/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6%E5%90%8D/","excerpt":"","text":"Vue自定义项目打包文件名文件位置：vue.config.js 1234567891011const diyStr = &#x27;xy&#x27;module.exports = &#123; configureWebpack: &#123; output: &#123; // 输出重构 打包编译后的 文件名称 【模块名称.版本号.js】 filename: `js/$&#123;diyStr&#125;-[name].js`, chunkFilename: `js/$&#123;diyStr&#125;-[name].js` &#125;, &#125;&#125;;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/tags/Vue/"}]},{"title":"JS各种操作方法","slug":"JS各种操作方法","date":"2021-08-12T16:00:00.000Z","updated":"2022-08-10T05:59:32.061Z","comments":true,"path":"2021/08/JS各种操作方法/","link":"","permalink":"https://leiqun1998.github.io/2021/08/JS%E5%90%84%E7%A7%8D%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/","excerpt":"","text":"JS各种操作方法1）js去掉最后一个逗号[ , ]123var abc = &quot;a,b,c,&quot;var s_abc = abc.substring(abc.length-1)==&#x27;,&#x27;)?abc.substring(0,abc.length-1):abc;console.log(s_abc) // a,b,c 2）js 判断字符串中是否存在某个字符串(String对象方法)1、使用indexOf()方法，返回某个指定的字符串值首次出现的位置。如果要检索的字符串值没有出现，则该方法返回 -1。 123456789101112// 案例1 数组中var arr = [&#x27;bar&#x27;, &#x27;pie&#x27;, &#x27;line&#x27;]var a = arr.indexOf(&#x27;pie&#x27;)if(a &gt; -1)&#123; console.log(&#x27;存在&#x27;)&#125;else&#123; console.log(&#x27;不存在&#x27;)&#125;// 案例2 字符串中var str = &quot;abc&quot;;console.log(str.indexOf(&quot;a&quot;) != -1 ); // true,存在 2、使用search()方法，用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 -1。 12var str = &quot;abc&quot;;console.log(str.search(&quot;c&quot;)); 3、使用match()方法，在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。 123var str = &quot;abc&quot;;var reg = RegExp(/c/);console.log(str.match(reg)) 3）截取指定长度字符串（参考网址）substr() 方法能够根据指定长度来截取子字符串。它包含两个参数，第一个参数表示准备截取的子字符串起始下标，第二个参数表示截取的长度。(lastIndexOf() 获取字符串最后一个点号的下标位置) 123var a = &quot;abc.de.fg12345&quot;;var b = s.substr(s.lastIndexOf(&quot;.&quot;) + 1,4); //截取最后一个点号后4个字符console.log(b); // fg12 如果省略第二个参数，则表示截取从起始位置开始到结尾的所有字符。考虑到扩展名的长度不固定，省略第二个参数会更灵活。 12var b = s.substr(s.lastIndexOf(&quot;.&quot;) + 1);console.log(b); // fg12345 4）Js 将字符串保存为文本文件12345678910111213141516function fakeClick(obj) &#123; var ev = document.createEvent(&quot;MouseEvents&quot;); ev.initMouseEvent(&quot;click&quot;, true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null); obj.dispatchEvent(ev);&#125;function exportRaw(name, data) &#123; var urlObject = window.URL || window.webkitURL || window; var export_blob = new Blob([data]); var save_link = document.createElementNS(&quot;http://www.w3.org/1999/xhtml&quot;, &quot;a&quot;) save_link.href = urlObject.createObjectURL(export_blob); save_link.download = name; fakeClick(save_link); &#125; exportRaw(&#x27;template.txt&#x27;,TXTTEMP) 注：&#39;template.txt&#39;为生成文件的名字， TXTTEMP则为js生成要导出的字符串 5）JS 复制方法123456789101112131415copyLink(label, val) &#123; let textarea = document.createElement(&#x27;textarea&#x27;) document.body.appendChild(textarea) let url = val textarea.value = url textarea.select() document.execCommand(&#x27;Copy&#x27;) textarea.remove() // 提示信息(element) this.$message(&#123; dangerouslyUseHTMLString: true, message: label+ &#x27;：&lt;strong&gt;&#x27;+val+&#x27;&lt;/strong&gt;, 复制成功!!!&#x27;, type: &#x27;success&#x27; &#125;)&#125; 6）JS数组转字符串1、toString() 把每个元素转换为字符串，然后以逗号连接输出显示。 123var str = [1, 2, 3, 4, 5] // 定义数组var s = str.toString(); // 把数组转为字符串console.log(s, typeof s) // &quot;1,2,3,4,5&quot; string 2、toLocalString() 读取数组的值，与 toString() 方法用法基本相同，区别在于能够使用 用户所在地区特定的分隔符把生成的字符串连接起来，形成一个字符串。 123var str = [1, 2, 3, 4, 5] // 定义数组var s = str.toLocalString(); // 把数组转换为本地字符串console.log(s); // &quot;1,2,3,4,5&quot; 3、join() 方法可以使用指定分隔符，把数组转换为字符串，省略参数时，默认使用逗号作为分隔符 123var str = [1, 2, 3, 4, 5] // 定义数组var s = str.join(&quot;-&quot;); // 指定分隔符console.log(s); // &quot;1-2-3-4-5&quot; 4、split() 把字符串转换为数组，指定两个参数，第 1 个参数为分隔符，第 2 个参数指定要返回数组的长度。 1234var str = &quot;1-2-3-4-5&quot;; // 定义字符串var s = str.split(&quot;-&quot;); // 指定分隔符，把字符串转换为数组console.log(s); // [1, 2, 3, 4, 5]// console.log(a.constructor == Array); 7）js sort方法根据数组中对象的某一个属性值进行排序12345678910111213141516171819var arr = [ &#123; name: &#x27;aaa&#x27;, value: 0 &#125;, &#123; name: &#x27;a-1-1&#x27;, value: 15 &#125;, &#123; name: &#x27;bbb&#x27;, value: 5 &#125;];// 封装一个数组排序方法compare(key)&#123; return function(a,b)&#123; const value1 = a[key]; const value2 = b[key]; // console.log(value1, value2); // return value1 - value2; return value1.localeCompare(value2) &#125;&#125;console.log(arr.sort(compare(&#x27;name&#x27;))) // 排序后的值 补充： 1stringObject.localeCompare(target) localeCompare ：说明比较结果的数字。如果 stringObject 小于 target，则 localeCompare() 返回小于 0 的数。如果 stringObject 大于 target，则该方法返回大于 0 的数。如果两个字符串相等，或根据本地排序规则没有区别，该方法返回 0。 8）js 两个数组对比，去除相同项得到新数组123456var arr1 = [1, 2, 3];var arr2 = [1, 2, 3, 4];let list = arr2.filter(items =&gt; &#123; if (!arr1.includes(items)) return items;&#125;)console.log(list); // [4] 9) js 随机数组里的值，随机0-10整数random1234567891011121314151617Math.ceil(); //向上取整。Math.floor(); //向下取整。Math.round(); //四舍五入。Math.random(); //0.0 ~ 1.0 之间的一个伪随机数。【包含0不包含1】 //比如0.8647578968666494Math.ceil(Math.random()*10); // 获取从1到10的随机整数 ，取0的概率极小。Math.round(Math.random()); //可均衡获取0到1的随机整数。Math.floor(Math.random()*10); //可均衡获取0到9的随机整数。Math.round(Math.random()*10); //基本均衡获取0到10的随机整数，其中获取最小值0和最大值10的几率少一半。① parseInt(Math.random()*(m-n)+n) // 生成 [n,m)，包含n但不包含m的正整数：② parseInt(Math.random()*(m-n)+n)+1 // 生成 (n,m]，不包含n但包含m的正整数：③ parseInt(Math.random()*(m-n+1)+n) // 生成 [n,m]，包含n和m的随机数：④ parseInt(Math.random()*(m-n-1)+n+1) // 生成 (n,m)，不包含n和m的正整数：parseInt(10*Math.random()) //输出0～9之间的随机整数Math.floor(Math.random()*10+1) //输出1～10之间的随机整数 10) js 删除数组第一个和最后一个元素1、删除数组第一个元素 1array.shift() 2、删除数组最后一个元素 1array.pop() 11）Json对象与Json字符串互转12JSON.parse(jsonstr); //可以将json字符串转换成json对象JSON.stringify(jsonobj); //可以将json对象转换成json对符串 补充：JSON在线解析及格式化验证 - JSON.cn 12) 数字与字符串互转123 // 字符前加“+”var str = &#x27;123&#x27;console.log(+str); 13) Js new Date() 日期格式处理1234567891011121314var myDate = new Date(); myDate.getYear(); //获取当前年份(2位) myDate.getFullYear(); //获取完整的年份(4位,1970-????) myDate.getMonth(); //获取当前月份(0-11,0代表1月) 所以获取当前月份是 myDate.getMonth()+1; myDate.getDate(); //获取当前日(1-31) myDate.getDay(); //获取当前星期X(0-6,0代表星期天) myDate.getTime(); //获取当前时间(从1970.1.1开始的毫秒数) myDate.getHours(); //获取当前小时数(0-23) myDate.getMinutes(); //获取当前分钟数(0-59) myDate.getSeconds(); //获取当前秒数(0-59) myDate.getMilliseconds(); //获取当前毫秒数(0-999) myDate.toLocaleDateString(); //获取当前日期 var mytime = myDate.toLocaleTimeString(); //获取当前时间 myDate.toLocaleString( ); //获取日期与时间 将字符串形式的日期转换成日期对象： 12var strTime=&quot;2011-04-16&quot;; // 字符串日期格式 var date= new Date(Date.parse(strTime.replace(/-/g, &quot;/&quot;))); // 转换成 Data(); 14)","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"https://leiqun1998.github.io/tags/JS/"}]},{"title":"Vue+element各类问题解决方案记录(网站资源)","slug":"Vue+element 各类问题解决方案记录(网站资源)","date":"2021-08-09T16:00:00.000Z","updated":"2022-08-10T06:11:49.248Z","comments":true,"path":"2021/08/Vue+element 各类问题解决方案记录(网站资源)/","link":"","permalink":"https://leiqun1998.github.io/2021/08/Vue+element%20%E5%90%84%E7%B1%BB%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%AE%B0%E5%BD%95(%E7%BD%91%E7%AB%99%E8%B5%84%E6%BA%90)/","excerpt":"","text":"Vue+element各类问题解决方案记录(网站资源) 1、在vue中如何获取token，并将token写进header 2、Vue-cli3.0怎么修改打包后的js文件名使用webpack配置vue.config.js文件 1234567891011121314const TimeStamp = new Date().getTime();// const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;); function resolve (dir) &#123; return path.join(__dirname, dir)&#125; // vue.config.jsmodule.exports = &#123; configureWebpack: &#123; output: &#123; // 输出重构打包编译后的文件名称 【模块名称.版本号.js】 filename: `js/[name].$&#123;TimeStamp&#125;.js`, chunkFilename: `js/[name].$&#123;TimeStamp&#125;.js`&#125;, 3、vue实用demo滚动条美化a、滚动条美化主要是通过以下3个css类来调整样式 ： -webkit-scrollbar：滚动条的宽度 -webkit-scrollbar-track：滚动条轨道 -webkit-scrollbar-thumb：滚动条滑块 b、示例css代码( .scroller 为目标容器的className ) : 1234567891011121314151617.scroller::-webkit-scrollbar &#123; width: 8px; height: 8px;&#125;.scroller::-webkit-scrollbar-track &#123; background-color:#F5F5F5; -webkit-border-radius: 2em; -moz-border-radius: 2em; border-radius:2em;&#125;.scroller::-webkit-scrollbar-thumb &#123; background-color:#c8c8c8; -webkit-border-radius: 2em; -moz-border-radius: 2em; border-radius:2em;&#125; 4、this.$router.push()；携带参数跳转页面a、router-link 1234567891. 不带参数 &lt;router-link :to=&quot;&#123;name:&#x27;home&#x27;&#125;&quot;&gt; &lt;router-link :to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt; //name,path都行, 建议用name // 注意：router-link中链接如果是&#x27;/&#x27;开始就是从根路由开始，如果开始不带&#x27;/&#x27;，则从当前路由开始。2.带参数 // params传参数 (类似post,url后面会不显示参数) &lt;router-link :to=&quot;&#123;name:&#x27;home&#x27;, params: &#123;id:1&#125;&#125;&quot;&gt; // query传参数 (类似get,url后面会显示参数) &lt;router-link :to=&quot;&#123;name:&#x27;home&#x27;, query: &#123;id:1&#125;&#125;&quot;&gt; b、this.$router.push() (函数里面调用) 123456789101112131415161. 不带参数 this.$router.push(&#x27;/home&#x27;) this.$router.push(&#123;name:&#x27;home&#x27;&#125;) this.$router.push(&#123;path:&#x27;/home&#x27;&#125;)2. query传参 this.$router.push(&#123;name:&#x27;home&#x27;,query: &#123;id:&#x27;1&#x27;&#125;&#125;) this.$router.push(&#123;path:&#x27;/home&#x27;,query: &#123;id:&#x27;1&#x27;&#125;&#125;)// html 取参 $route.query.id// script 取参 this.$route.query.id3. params传参 this.$router.push(&#123;name:&#x27;home&#x27;,params: &#123;id:&#x27;1&#x27;&#125;&#125;) // 只能用 name // 路由配置 path: &quot;/home/:id&quot; 或者 path: &quot;/home:id&quot; , // 不配置path ,第一次可请求,刷新页面id会消失 // 配置path,刷新页面id会保留 // html 取参 $route.params.id // script 取参 this.$route.params.id c、**this.$router.replace() (用法同上,push) ** d、this.$router.go(n) () this.$router.go(n):向前或者向后跳转n个页面,n可为正整数或负整数 注：具体详解请参考标题链接内的具体内容！！！ 5、ElementUI中el-table双击单元格事件并获取指定列的值和弹窗显示详细信息主要在于el-table设置cell-dblclick事件 6、 vue路由跳转打开新页面12let routeUrl = this.$router.resolve(&#123; name:&quot;Panorama&quot; &#125;)window.open(routeUrl.href, &#x27;_blank&#x27;); 7、vue项目子组件每次打开显示的都是上一次的内容怎么办打开一个子组件的弹窗编辑完成弹窗关闭但是当第二次打开还是上次编辑完的那个状态。发现并没有清空里面的数据。而且没有重新走created。 这个时候的解决办法是你把弹窗写个v-if和visible.sync写一样的变量。这样就可以啦。 1234567891011&lt;!-- 添加新的资源的弹窗 --&gt; &lt;el-dialog :visible.sync=&quot;uploadDialogVisible&quot; v-if=&quot;uploadDialogVisible&quot; width=&quot;50%&quot; :append-to-body=&quot;true&quot; &gt; &lt;ResourceUpload :filtersAdd=&quot;filtersAdd&quot; :option=&quot;option&quot; :restype=&quot;uploadtype&quot; @upload-finish=&quot;closeupload&quot;&gt;&lt;/ResourceUpload&gt;&lt;/el-dialog&gt; 8、el-dropdown-item的点击事件12345678&lt;el-dropdown&gt; &lt;el-avatar icon=&quot;el-icon-user&quot;&gt;&lt;/el-avatar&gt; &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt; &lt;!-- 直接在【el-dropdown-item】标签上设置【@click】事件，必须加上修饰符【.native】，否则事件无法生效！ --&gt; &lt;el-dropdown-item @click.native=&quot;userSet&quot; &gt;个人信息&lt;/el-dropdown-item&gt; &lt;el-dropdown-item @click.native=&quot;logOut&quot; divided&gt;LogOut&lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt;&lt;/el-dropdown&gt; 9、Vue Router通过props传参a、(vue)路由中指定prop属性 b、[Vue Router通过props传参](Vue Router通过props传参_落裸裸的专栏-CSDN博客) 10、elementUI中el-tree树形结构中节点过滤问题主要在树形组件上绑定:filter-node-method=&quot;filterNode&quot;方法 11、[Vue-Element-UI中筛选数组数据，控制表格中某一行不显示](Vue-Element-UI中筛选数组数据，控制表格中某一行不显示 - 简书 (jianshu.com)) 12、elementUI中input输入框,正则输入,并限制输入长度12345&lt;el-input v-model=&quot;value&quot; onkeyup=&quot;this.value=this.value.replace(/[^\\d.]/g,&#x27;&#x27;);&quot;maxlength=&quot;4&quot;&gt;&lt;/el-input&gt;&lt;!-- 另有一种情况，v-model没有同步更新，详情查看链接内容 --&gt; 补充1：[Vue 组件Element el-input 关于输入的数据用正则匹配，比如只允许输入数字](Vue 组件Element el-input 关于输入的数据用正则匹配，比如只允许输入数字_ITKouSyou的博客-CSDN博客_el-input 正则) 补充2：vue–字符串检验–(数字–特殊字符–汉字)_weixin_43431702的博客-CSDN博客_vue 字符串判断](https://blog.csdn.net/weixin_43431702/article/details/91418104)) 13、Vue2/Vue3中快捷使用data中的变量反映到css变量（scss也适用） 14、[ElementUI 表单验证(修改密码)](ElementUI 表单验证(修改密码)_gs981600308的博客-CSDN博客_element修改密码) 15、vue使用@路径引入a、确定项目中是否有path模块，若无，则先安装： 1npm install path --save b、在vue.config.js中配置 123456789101112const path = require(&quot;path&quot;);function resolve(dir) &#123; return path.join(__dirname, dir);&#125;module.exports = &#123; chainWebpack: config =&gt; &#123; config.resolve.alias .set(&quot;@&quot;, resolve(&quot;src&quot;)); &#125;,&#125; 补充：scss background: url（）路径无效问题 12// 补充示例background: url(&quot;~@/assets/arrows.png&quot;) no-repeat center; 16、vue引用组件的两个方法123456789101112131415161718192021222324252627&lt;!-- 示例1 --&gt;&lt;script&gt; //使用import导入自定义的组件，es6的引入机制，推荐使用 import myComponent from &#x27;./myComponent.vue&#x27; export default &#123; //在components中写入子组件 components: &#123;myComponent&#125;, &#125;&lt;/script&gt;&lt;!-- 示例2 --&gt;&lt;script&gt; export default &#123; //1.直接在components中写入子组件时给出引入路径，es5写法 components: &#123; myComponent:require(&#x27;./myComponent.vue&#x27;).default &#125;, &#125;&lt;/script&gt;&lt;!-- 补充示例3 --&gt;&lt;script&gt; export default &#123; //直接在components中引入子组件路径 components: () =&gt; import（&#x27;./myComponent.vue&#x27;）, &#125;&lt;/script&gt; 17、","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/tags/Vue/"},{"name":"Element UI","slug":"Element-UI","permalink":"https://leiqun1998.github.io/tags/Element-UI/"}]},{"title":"JS 复制方法","slug":"JS 复制方法","date":"2021-07-20T16:00:00.000Z","updated":"2022-08-10T06:12:43.621Z","comments":true,"path":"2021/07/JS 复制方法/","link":"","permalink":"https://leiqun1998.github.io/2021/07/JS%20%E5%A4%8D%E5%88%B6%E6%96%B9%E6%B3%95/","excerpt":"","text":"JS 复制方法123456789101112131415copyLink(label, val) &#123; let textarea = document.createElement(&#x27;textarea&#x27;) document.body.appendChild(textarea) let url = val textarea.value = url textarea.select() document.execCommand(&#x27;Copy&#x27;) textarea.remove() // 提示信息(element) this.$message(&#123; dangerouslyUseHTMLString: true, message: label+ &#x27;：&lt;strong&gt;&#x27;+val+&#x27;&lt;/strong&gt;, 复制成功!!!&#x27;, type: &#x27;success&#x27; &#125;)&#125;","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"https://leiqun1998.github.io/tags/JS/"}]},{"title":"div的斜条纹背景CSS代码","slug":"div的斜条纹背景CSS代码","date":"2021-07-20T16:00:00.000Z","updated":"2022-08-10T06:01:50.377Z","comments":true,"path":"2021/07/div的斜条纹背景CSS代码/","link":"","permalink":"https://leiqun1998.github.io/2021/07/div%E7%9A%84%E6%96%9C%E6%9D%A1%E7%BA%B9%E8%83%8C%E6%99%AFCSS%E4%BB%A3%E7%A0%81/","excerpt":"","text":"div的斜条纹背景CSS代码 注意：以下为在Vue环境下的测试 DIV部分：123456789&lt;div style=&quot;margin-top: 10px;padding: 10px;background: #172842;text-align: center;&quot;&gt; &lt;div style=&quot;font-size: 25px;color: white;&quot;&gt;div的斜条纹背景&lt;/div&gt; &lt;div class=&quot;container stripe&quot; v-for=&quot;o in 5&quot;&gt; &lt;div class=&quot;container-text&quot;&gt; &lt;div class=&quot;status-point&quot;/&gt; NO.&#123;&#123; o &#125;&#125; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; CSS：123456789101112131415161718192021222324252627282930313233343536373839404142434445.container&#123; /* margin: auto; */ margin: auto 5px; display: inline-block; /* width: 300px; height: 200px; */ width: 450px; height: 250px; border: 1px solid rgb(0, 228, 245, .35); border-radius: 10px; overflow: hidden; &#125; .container-text&#123; color: #02FEFF; background: rgb(0, 98, 245, .15); height: 25px; line-height: 25px; text-align: left; padding-left: 5px; &#125; /* 文字前的圆点效果 */ .status-point &#123; background-color: #02FEFF; display: inline-block; width: 10px; height: 10px; border-radius: 50%; &#125; /* 斜条纹效果 */ .stripe&#123; /* background: linear-gradient( 135deg, rgba(0, 153, 68, .1) 0, rgba(0, 153, 68, .1) 25%, transparent 25%, transparent 50%, rgba(0, 153, 68, .1) 50%, rgba(0, 153, 68, .1) 75%, transparent 75%, transparent ); */ background: linear-gradient( 135deg, rgb(0 221 245 / 3%) 0, rgba(0 221 245 / 3%) 25%, transparent 25%, transparent 50%, rgba(0 221 245 / 3%) 50%, rgba(0 221 245 / 3%) 75%, transparent 75%, transparent ); background-size: 50px 50px; &#125;","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://leiqun1998.github.io/tags/CSS/"}]},{"title":"Github自我介绍主页---美化","slug":"Github自我介绍主页---美化","date":"2021-04-08T16:00:00.000Z","updated":"2022-08-10T06:14:38.605Z","comments":true,"path":"2021/04/Github自我介绍主页---美化/","link":"","permalink":"https://leiqun1998.github.io/2021/04/Github%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D%E4%B8%BB%E9%A1%B5---%E7%BE%8E%E5%8C%96/","excerpt":"","text":"Github自我介绍主页—美化 在GitHub创建和用户名同名的仓库会成为一个特殊的库，它的README.md文件的内容将会展示在你的个人主页上 在GitHub创建和用户名同名的仓库（务必设置为公开状态） 勾选下方添加README.md自述文件 创建后修改README.md自述文件，在其中加入以下这句： 更改 ?username= 的值为你的 GitHub 用户名。 1[![Anurag&#x27;s GitHub stats](https://github-readme-stats.vercel.app/api?username=anuraghazra)](https://github.com/anuraghazra/github-readme-stats) 便可实现自我介绍的美化 更多样式详情：github-readme-stats另外搭配&lt;img&gt;标签, 可以控制展示的位置, 比如以下让他靠右 参考网址：https://blog.csdn.net/u012355401/article/details/109822560 1&lt;img align=&quot;right&quot; src=&quot;https://github-readme-stats.vercel.app/api?username=WangDanPeng&amp;show_icons=true&quot;&gt;","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://leiqun1998.github.io/tags/Git/"}]},{"title":"VsCode插件—Power Mode(打字特效)","slug":"VsCode插件—Power Mode(打字特效)","date":"2021-02-05T16:00:00.000Z","updated":"2022-08-10T05:56:40.951Z","comments":true,"path":"2021/02/VsCode插件—Power Mode(打字特效)/","link":"","permalink":"https://leiqun1998.github.io/2021/02/VsCode%E6%8F%92%E4%BB%B6%E2%80%94Power%20Mode(%E6%89%93%E5%AD%97%E7%89%B9%E6%95%88)/","excerpt":"","text":"VsCode插件—Power Mode(打字特效)网址：https://www.cnblogs.com/echolun/p/11454915.html安装在扩展中直接搜索 Power Mode，选中第一个安装，安装后，务必重启VsCode！！！ 配置打开用户设置—-选择常用设置—-点击 在settings.json中编辑 若找不到可参考本网站：https://www.jb51.net/softjc/730336.html 或者 直接在 设置—&gt;用户—&gt;扩展—&gt;Power Mode—settings.json(随意一个) 直接进入, 在末尾添加 12&quot;powermode.enabled&quot;: true, // 启动效果&quot;powermode.enableShake&quot;: false, // 关闭代码抖动 样式选择123456789101112131415161718192021222324//powser mode //启动效果 &quot;powermode.enabled&quot;: true, // 启动 &quot;powermode.enableShake&quot;: false, // 关闭代码抖动 //样式 // 火焰 // &quot;powermode.presets&quot;: &quot;flames&quot;, // 炸裂 &quot;powermode.presets&quot;: &quot;exploding-rift&quot;, // 爆炸 // &quot;powermode.presets&quot;: &quot;simple-rift&quot;, // 粒子 // &quot;powermode.presets&quot;: &quot;particles&quot;, // 烟花 // &quot;powermode.presets&quot;: &quot;fireworks&quot;, // 魔法 // &quot;powermode.presets&quot;: &quot;magic&quot;, // 回形针 // &quot;powermode.presets&quot;: &quot;clippy&quot;, // 以下可不用配置 // 时间间隔 &quot;powermode.comboTimeout&quot;: 0, // &quot;powermode.enableShake&quot;: true, // 随字体颜色变化 // &quot;powermode.backgroundMode&quot;: &quot;mask&quot;,","categories":[],"tags":[{"name":"VsCode","slug":"VsCode","permalink":"https://leiqun1998.github.io/tags/VsCode/"}]},{"title":"vue项目-添加粒子背景样式","slug":"vue背景粒子效果","date":"2021-01-01T03:11:55.000Z","updated":"2022-08-10T06:00:00.655Z","comments":true,"path":"2021/01/vue背景粒子效果/","link":"","permalink":"https://leiqun1998.github.io/2021/01/vue%E8%83%8C%E6%99%AF%E7%B2%92%E5%AD%90%E6%95%88%E6%9E%9C/","excerpt":"","text":"Vue组件：【 vue-particles 】 设置粒子背景 官网地址：https://vue-particles.netlify.app/ 1、安装粒子组件1npm install vue-particles --save-dev 2、使用Main.js12import VueParticles from &#x27;vue-particles&#x27;Vue.use(VueParticles) App.vue12345&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;vue-particles color=&quot;#dedede&quot;&gt;&lt;/vue-particles&gt; &lt;/div&gt; &lt;/template&gt; 注①：使用后，元素会占据位置，挤压其他元素，按照以下方法在CSS中设置绝对定位，使其置于下方，不挤压其他元素git解决问题地址：https://github.com/creotip/vue-particles/issues/15 12345678#particles-js &#123; /* 背景粒子效果: 使用绝对定位，使其置于下方，不挤压其他元素 */ position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#125; 注②：按钮没有点击响应（input元素似乎不受影响）解决方案：https://www.jb51.net/article/180034.htm 在目标按钮上添加样式（也可在目标按钮的外层div设置，使其内部按钮全部可点击，如login页面中，背景为一个大元素，登录部分(用户名、密码)为一个大元素） 1position: relative; /* 使其在粒子背景一起时，按钮可被点击 */","categories":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/tags/Vue/"}]},{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2020-06-22T16:57:03.000Z","updated":"2022-08-10T06:16:01.249Z","comments":true,"path":"2020/06/我的第一篇博客文章/","link":"","permalink":"https://leiqun1998.github.io/2020/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","text":"第一篇2020.6.23创建，记录博客之旅 参考文献B站 CodeSheep 博主 www.codesheep.cn","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://leiqun1998.github.io/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-06-22T16:48:00.000Z","updated":"2022-08-10T06:15:29.696Z","comments":true,"path":"2020/06/hello-world/","link":"","permalink":"https://leiqun1998.github.io/2020/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://leiqun1998.github.io/tags/hexo/"}]}],"categories":[{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/categories/Vue/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://leiqun1998.github.io/tags/CSS/"},{"name":"Vue","slug":"Vue","permalink":"https://leiqun1998.github.io/tags/Vue/"},{"name":"Element UI","slug":"Element-UI","permalink":"https://leiqun1998.github.io/tags/Element-UI/"},{"name":"JS","slug":"JS","permalink":"https://leiqun1998.github.io/tags/JS/"},{"name":"Echarts","slug":"Echarts","permalink":"https://leiqun1998.github.io/tags/Echarts/"},{"name":"Git","slug":"Git","permalink":"https://leiqun1998.github.io/tags/Git/"},{"name":"VsCode","slug":"VsCode","permalink":"https://leiqun1998.github.io/tags/VsCode/"},{"name":"hexo","slug":"hexo","permalink":"https://leiqun1998.github.io/tags/hexo/"}]}